"use strict";(self.webpackChunkselubi_tech=self.webpackChunkselubi_tech||[]).push([[271],{3905:(e,t,i)=>{i.d(t,{Zo:()=>m,kt:()=>k});var n=i(7294);function a(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function l(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function r(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?l(Object(i),!0).forEach((function(t){a(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):l(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function o(e,t){if(null==e)return{};var i,n,a=function(e,t){if(null==e)return{};var i,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)i=l[n],t.indexOf(i)>=0||(a[i]=e[i]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)i=l[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var s=n.createContext({}),d=function(e){var t=n.useContext(s),i=t;return e&&(i="function"==typeof e?e(t):r(r({},t),e)),i},m=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var i=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=d(i),c=a,k=u["".concat(s,".").concat(c)]||u[c]||p[c]||l;return i?n.createElement(k,r(r({ref:t},m),{},{components:i})):n.createElement(k,r({ref:t},m))}));function k(e,t){var i=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=i.length,r=new Array(l);r[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:a,r[1]=o;for(var d=2;d<l;d++)r[d]=i[d];return n.createElement.apply(null,r)}return n.createElement.apply(null,i)}c.displayName="MDXCreateElement"},442:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var n=i(7462),a=(i(7294),i(3905));const l={id:"linux-cheat-sheet",title:"Linux Cheat Sheet",sidebar_label:"Cheat Sheet",sidebar_position:1,tags:["Linux"]},r=void 0,o={unversionedId:"linux/linux-cheat-sheet",id:"linux/linux-cheat-sheet",title:"Linux Cheat Sheet",description:"Notable commands, variables and files for administering linux.",source:"@site/docs/linux/cheat_sheet.md",sourceDirName:"linux",slug:"/linux/linux-cheat-sheet",permalink:"/linux/linux-cheat-sheet",draft:!1,editUrl:"https://github.com/Selubi/selubi.github.io/tree/main/docs/linux/cheat_sheet.md",tags:[{label:"Linux",permalink:"/tags/linux"}],version:"current",sidebarPosition:1,frontMatter:{id:"linux-cheat-sheet",title:"Linux Cheat Sheet",sidebar_label:"Cheat Sheet",sidebar_position:1,tags:["Linux"]},sidebar:"defaultSidebar",previous:{title:"Linux",permalink:"/category/linux"},next:{title:"BIOS and UEFI",permalink:"/linux/linux-concept-bios"}},s={},d=[{value:"Environment Variables",id:"environment-variables",level:2},{value:"Commands:",id:"commands",level:3},{value:"GRUB (Bootloader)",id:"grub-bootloader",level:2},{value:"Commands:",id:"commands-1",level:3},{value:"Variables:",id:"variables",level:3},{value:"Files:",id:"files",level:3},{value:"Service Manager (<code>systemd</code>)",id:"service-manager-systemd",level:2},{value:"Commands",id:"commands-2",level:3},{value:"General",id:"general",level:4},{value:"Services",id:"services",level:4},{value:"Targets",id:"targets",level:4},{value:"Files:",id:"files-1",level:3},{value:"Shared Libraries",id:"shared-libraries",level:2},{value:"Commands:",id:"commands-3",level:3},{value:"Variables:",id:"variables-1",level:3},{value:"Files:",id:"files-2",level:3}],m={toc:d},u="wrapper";function p(e){let{components:t,...i}=e;return(0,a.kt)(u,(0,n.Z)({},m,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Notable commands, variables and files for administering linux."),(0,a.kt)("p",null,"Paths ending with ",(0,a.kt)("inlineCode",{parentName:"p"},"/")," is a directory, and those without it is a file. Example: ",(0,a.kt)("inlineCode",{parentName:"p"},"~/test")," is a file and ",(0,a.kt)("inlineCode",{parentName:"p"},"~/test/")," is a folder."),(0,a.kt)("h2",{id:"environment-variables"},"Environment Variables"),(0,a.kt)("p",null,"Environment variables are variables accessible by a specific instance of a process, usually within a shell session."),(0,a.kt)("h3",{id:"commands"},"Commands:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"VARIABLE=value")," - Assigns ",(0,a.kt)("inlineCode",{parentName:"li"},"value")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"VARIABLE"),". If ",(0,a.kt)("inlineCode",{parentName:"li"},"VARIABLE")," already exxists, this overwrites its previous value."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$VARIABLE")," - Accesses the value of ",(0,a.kt)("inlineCode",{parentName:"li"},"VARIABLE"),". When a command is executed, ",(0,a.kt)("inlineCode",{parentName:"li"},"$VARIABLE")," is expanded to its values."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"echo $VARIABLE")," - Displays the value of ",(0,a.kt)("inlineCode",{parentName:"li"},"VARIABLE"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"set")," - Lists all currently set environment variables."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"unset VARIABLE")," - Removes the environment variable ",(0,a.kt)("inlineCode",{parentName:"li"},"VARIABLE"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"export VARIABLE")," - Makes ",(0,a.kt)("inlineCode",{parentName:"li"},"VARIABLE")," accessible to child processes spawned by the current process. ",(0,a.kt)("inlineCode",{parentName:"li"},"export VARIABLE=value")," is equivalent to ",(0,a.kt)("inlineCode",{parentName:"li"},"VARIABLE=value && export VARIABLE"),".")),(0,a.kt)("h2",{id:"grub-bootloader"},"GRUB (Bootloader)"),(0,a.kt)("p",null,"UEFI system and GRUB 2 is assumed in this section."),(0,a.kt)("h3",{id:"commands-1"},"Commands:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"grub-install")," - Installs GRUB to ",(0,a.kt)("inlineCode",{parentName:"li"},"/boot/efi/"),". Pass the ",(0,a.kt)("inlineCode",{parentName:"li"},"--efi-directory")," option to install to other directory."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"update-grub")," - Shortcut to the command ",(0,a.kt)("inlineCode",{parentName:"li"},"grub-mkconfig -o /boot/grub/grub.cfg"),". Updates GRUB configuration file (commonly located in ",(0,a.kt)("inlineCode",{parentName:"li"},"/boot/grub/grub.cfg"),") from the definitions in ",(0,a.kt)("inlineCode",{parentName:"li"},"/etc/default/grub")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"/etc/grub.d/")),(0,a.kt)("li",{parentName:"ul"},"Press",(0,a.kt)("inlineCode",{parentName:"li"},"C")," when on GRUB menu screen to access GRUB shell.")),(0,a.kt)("h3",{id:"variables"},"Variables:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$prefix")," - GRUB configuration path location. (This is a variable for GRUB shell, not linux one)")),(0,a.kt)("h3",{id:"files"},"Files:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"/boot/efi/")," - Mount point of ESP (EFI System Partition) containing the actual bootloader UEFI accesses"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"/boot/grub/grub.cfg")," - Common location for GRUB configuration file. Located in root partition. Do not edit directly, edit ",(0,a.kt)("inlineCode",{parentName:"li"},"/etc/default/grub")," and run ",(0,a.kt)("inlineCode",{parentName:"li"},"update-grub")," instead."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"/etc/grub.d/")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"update-grub")," changes ",(0,a.kt)("inlineCode",{parentName:"li"},"/boot/grub/grub.cfg")," based on this folder. Contents are executed in numerical order. Custom entries are usualy added to ",(0,a.kt)("inlineCode",{parentName:"li"},"40_custom")," file. Example entry is shown below.",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},'menuentry "Default OS" {\n    set root=(hd0,1)\n    linux /vmlinuz root=/dev/sda1 ro quiet splash\n    initrd /initrd.img\n')),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"set root=(hd0,1)")," - Sets device and partition of root folder of OS. ",(0,a.kt)("inlineCode",{parentName:"li"},"hd0"),",",(0,a.kt)("inlineCode",{parentName:"li"},"hd1"),",... corresponds to ",(0,a.kt)("inlineCode",{parentName:"li"},"/dev/sda"),",",(0,a.kt)("inlineCode",{parentName:"li"},"dev/sdb"),",... in linux. Partition numbering starts at 1. So, this configuration in particular equates to ",(0,a.kt)("inlineCode",{parentName:"li"},"/dev/sda1")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"/vmlinuz")," - Location of linux kernel. Because the kernel is located directly inside root folder, we can assume that this configuration has a seperate boot partition and it is not located at ",(0,a.kt)("inlineCode",{parentName:"li"},"/dev/sda1")," ",(0,a.kt)("inlineCode",{parentName:"li"},"(hd0,1)"),". If there is no boot partition and the boot folder is located within root parition, something like ",(0,a.kt)("inlineCode",{parentName:"li"},"/boot/vmlinuz")," will instead be shown instead.")))),(0,a.kt)("h2",{id:"service-manager-systemd"},"Service Manager (",(0,a.kt)("inlineCode",{parentName:"h2"},"systemd"),")"),(0,a.kt)("h3",{id:"commands-2"},"Commands"),(0,a.kt)("h4",{id:"general"},"General"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"systemctl list-unit-files")," - Lists all available units and show if they are enabled. Pass the option ",(0,a.kt)("inlineCode",{parentName:"li"},"--type=TYPE")," to only show units of ",(0,a.kt)("inlineCode",{parentName:"li"},"TYPE")," type."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"systemctl list-units")," - Lists all active units. Pass the option ",(0,a.kt)("inlineCode",{parentName:"li"},"--type=TYPE")," to only show units of ",(0,a.kt)("inlineCode",{parentName:"li"},"TYPE")," type."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"systemctl reboot")," - Reboot the system. Same effect as ",(0,a.kt)("inlineCode",{parentName:"li"},"systemctl isolate reboot.target")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"systemctl poweroff")," - Power off the system. Same effect as ",(0,a.kt)("inlineCode",{parentName:"li"},"systemctl isolate shutdown.target")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"systemctl suspend")," - Sleeps the system. Data in memory is saved as is."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"systemctl hibernate")," - Hibernates the system. Data in memory is moved to disk."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"systemctl rescue"),' - Puts the system in rescue mode (similar to "safe mode" on Windows). Same effect as ',(0,a.kt)("inlineCode",{parentName:"li"},"systemctl isolate rescue.target"))),(0,a.kt)("h4",{id:"services"},"Services"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"systemctl start [<service>]"),"\u3000- Starts unit"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"systemctl stop [<service>]"),"\u3000- Stops unit"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"systemctl restart [<service>]"),"\u3000- Restarts unit"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"systemctl status [<service>]"),"\u3000- Shows the state of unit"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"systemctl is-active [<service>]"),"\u3000- Shows ",(0,a.kt)("inlineCode",{parentName:"li"},"active")," if unit is running, ",(0,a.kt)("inlineCode",{parentName:"li"},"inactive")," otherwise."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"systemctl enable [<service>]"),"\u3000- Makes unit start from the next system initialization. Does NOT start unit immediately."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"systemctl disable [<service>]"),"\u3000- Unit will not start from the next system initialization."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"systemctl is-enabled [<service>]")," - Outputs ",(0,a.kt)("inlineCode",{parentName:"li"},"enabled")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"disabled"),".")),(0,a.kt)("h4",{id:"targets"},"Targets"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"systemctl isolate [<target>]")," - Alternate to the target unit."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"systemctl set-default [<target>]")," - Set the default initialization target for subsequent boots. Usually defaults to ",(0,a.kt)("inlineCode",{parentName:"li"},"multi-user.target")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"graphical.target"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"systemctl get-default")," - Get the default initialization target.")),(0,a.kt)("h3",{id:"files-1"},"Files:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"/lib/systemd/system/")," - Location of unit configuration file")),(0,a.kt)("h2",{id:"shared-libraries"},"Shared Libraries"),(0,a.kt)("h3",{id:"commands-3"},"Commands:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ldconfig")," - Reads ",(0,a.kt)("inlineCode",{parentName:"li"},"/etc/ld.so.conf")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"/etc/ld.so.conf.d/*")," to configure shared library location and caches them into ",(0,a.kt)("inlineCode",{parentName:"li"},"/etc/ld.so.cache"),".",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-p")," - Shows currently cached shared library (do not update the cache)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-v")," - Updates the cache and show the cache while doing so."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ldd [program || so]")," - Shows shared library dependencies of a program or shared object."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"objdump")," & ",(0,a.kt)("inlineCode",{parentName:"li"},"readelf")," - Examines contents of object, binary, and shared library files")),(0,a.kt)("h3",{id:"variables-1"},"Variables:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$LD_LIBRARY_PATH")," - Colon (",(0,a.kt)("inlineCode",{parentName:"li"},":"),") separated set of directories to look for libraries. User configured. Empty by default.")),(0,a.kt)("h3",{id:"files-2"},"Files:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"/etc/ld.so.conf.d/")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"ld")," (dynamic linker) looks for shared library paths defined in files in this folder.")),(0,a.kt)("p",null,"Last updated: July 28, 2023"))}p.isMDXComponent=!0}}]);